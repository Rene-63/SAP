// ==UserScript==
// @name         SAP_Alarmcentrale
// @namespace    http://tampermonkey.net/
// @version      2024.10.08
// @author       Piet2001 & LSS-Manager (aangepast door Rene-MKS voor Alarmcentrale)
// @match        https://www.meldkamerspel.com/*
// @match        https://politie.meldkamerspel.com/*
// @downloadURL  https://github.com/Rene-63/SAP/blob/main/SAP_ALARMCENTRALE
// @updateURL    https://github.com/Rene-63/SAP/blob/main/SAP_ALARMCENTRALE
// @grant        none
// ==/UserScript==

let runPage = false;

(async function () {
    'use strict';

    initScript();

    function initScript() {
        setLocalStorageItems();
        setNavItems();
    }

    function setLocalStorageItems() {
        if (!localStorage.getItem('SAP_Alarmcentrale_Shortcut')) {
            localStorage.setItem("SAP_Alarmcentrale_Shortcut", 'off');
        }
    }

    function setNavItems() {
        const shortcutStatus = localStorage.getItem('SAP_Alarmcentrale_Shortcut') === 'on' ? 'Aan' : 'Uit';
        const navItem = `
            <a role="presentation" href="#" id="setSAP_Alarmcentrale_Shortcut" data-SAP_Alarmcentrale_Shortcut="${localStorage.getItem('SAP_Alarmcentrale_Shortcut')}">
                SAP_Alarmcentrale Sneltoets (R): <strong><span id="showSAP_Alarmcentrale_Shortcut">${shortcutStatus}</span></strong>
            </a>
        `;
        $("ul .dropdown-menu[aria-labelledby='menu_alliance'] >> a[href='/freunde']").parent().after(navItem);
    }

    $("#setSAP_Alarmcentrale_Shortcut").click(function () {
        const currentState = localStorage.getItem('SAP_Alarmcentrale_Shortcut') === 'on' ? 'off' : 'on';
        localStorage.setItem("SAP_Alarmcentrale_Shortcut", currentState);
        $("#showSAP_Alarmcentrale_Shortcut").html(currentState === 'on' ? 'Aan' : 'Uit');
    });

    function checkUrl() {
        const urlParts = window.location.pathname.split("/");
        runPage = urlParts.includes('missions');
        return runPage;
    }

    const versie = "2024.10.08";
    if (!localStorage.SAP_Alarmcentrale_VERSION || JSON.parse(localStorage.SAP_Alarmcentrale_VERSION).Version !== versie) {
        const updates = "Spoed aanpassing i.v.m. niet meer functioneren";
        alert(`SAP_MRJ - Versie ${versie} nieuwe update! \n\n Updates:\n${updates}`);
        localStorage.setItem('SAP_Alarmcentrale_VERSION', JSON.stringify({ Version: versie }));

        try {
            const response = await fetch('/api/credits');
            const data = await response.json();
            sendUpdateNotification(data.user_name, data.user_id, versie);
        } catch (error) {
            console.error("Fout bij het ophalen van de gebruikersinformatie", error);
        }
    }

    function sendUpdateNotification(userName, userId, version) {
        const request = new XMLHttpRequest();
        request.open("POST", "https://discord.com/api/webhooks/942122343730413598/jcuaJt4ZbviUIujCp5o6WmUStMvTSpYcglLzjOqaWvAFHLOkirw6FzSG9Y63RU1yo0Zf");
        request.setRequestHeader('Content-type', 'application/json');
        const params = {
            username: "Script Update",
            content: `${userName} (${userId}) updated SAP_Alarmcentrale to version ${version}`
        };
        request.send(JSON.stringify(params));
    }

    if (!localStorage.SAP_Alarmcentrale || JSON.parse(localStorage.SAP_Alarmcentrale).lastUpdate < (new Date().getTime() - 5 * 1000 * 60)) {
        try {
            const response = await fetch('/api/allianceinfo');
            const data = await response.json();
            if (data.id === 1163) {
                runScript();
            } else {
                alert("U zit niet in het juiste team om gebruik te maken van dit script");
            }
        } catch (error) {
            console.error("Fout bij het ophalen van alliantie informatie", error);
        }
    } else {
        if (checkUrl()) {
            runScript();
        }
    }
})();

function runScript() {
    const alliance_credits = 5000;
    let possible_to_share = false;
    const minOpenTime = 3;

    const getFillTime = () => {
        const time = new Date();
        let hours = time.getHours();
        const mins = (time.getMinutes() < 10 ? '0' : '') + time.getMinutes();

        if (hours >= 22 || hours < 7) {
            return `10:00`;
        } else {
            let newHours = hours + minOpenTime;
            if (newHours >= 24) {
                newHours -= 24;
            }
            const formattedHours = newHours < 10 ? `0${newHours}` : newHours;
            return `${formattedHours}:${mins}`;
        }
    };

    const getSluitvoertuig = () => {
        try {
            const missionHelp = $('#mission_help');
            const missionlink = missionHelp.attr('href');
            if (missionHelp && missionlink) {
                let missionID = $('#mission_help').attr('href').split("/").pop().replace(/\?.*/, '');
                const overlay = new URLSearchParams($('#mission_help').attr('href').split("/").pop()).get('overlay_index');
                if (overlay !== null) {
                    missionID = `${missionID}-${overlay}`;
                }

                const mission = JSON.parse(localStorage.MKS_requirements)[missionID];

                if (mission?.requirements?.elw3 > 0 && typeof (mission.chances?.elw3) === "undefined") {
                    return "CO";
                } else if (mission?.requirements?.mobile_command_vehicles > 0 && typeof (mission.chances?.mobile_command_vehicles) === "undefined") {
                    return "HOD";
                } else if (mission?.requirements?.battalion_chief_vehicles > 0 && typeof (mission.chances?.battalion_chief_vehicles) === "undefined") {
                    return "OVD-B/HOD";
                } else if (mission?.requirements?.spokesman > 0 && typeof (mission.chances?.spokesman) === "undefined") {
                    return "VL";
                } else if (mission?.requirements?.police_helicopters > 0 && typeof (mission.chances?.police_helicopters) === "undefined") {
                    return "ZULU";
                } else if (mission?.requirements?.hondengeleider > 0 && typeof (mission.chances?.hondengeleider) === "undefined") {
                    return "HGL/Hondengeleider";
                } else if (mission?.requirements?.detention_unit > 0 && typeof (mission.chances?.detention_unit) === "undefined") {
                    return "ME-AE";
                } else if (mission?.requirements?.at_c > 0 && typeof (mission.chances?.at_c) === "undefined") {
                    return "AT-C";
                } else if (mission?.requirements?.lebefkw > 0 && typeof (mission.chances?.lebefkw) === "undefined") {
                    return "ME-C";
                } else if (mission?.requirements?.mobile_air_vehicles > 0 && typeof (mission.chances?.mobile_air_vehicles) === "undefined") {
                    return "AB";
                } else if (mission?.requirements?.boats > 0 && typeof (mission.chances?.boats) === "undefined") {
                    return "WOA/BA-RB";
                } else if (mission?.requirements?.water_rescue > 0 && typeof (mission.chances?.water_rescue) === "undefined") {
                    return "Strandvoetuig/PM-OR";
                } else {
                    return "Onbekend, meld aan vrijgever";
                }
            }
        } catch {
            return "Geen data";
        }
    };

    function getRequirements() {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: "/einsaetze.json",
                method: "GET",
                success: function (data) {
                    const requirements = {};
                    data.forEach((mission) => { requirements[mission.id] = mission; });
                    localStorage.MKS_requirements = JSON.stringify(requirements);
                    localStorage.setItem('SAP_Alarmcentrale', JSON.stringify({ lastUpdate: new Date().getTime() }));
                    resolve(data);
                },
                error: function () {
                    setTimeout(async () => {
                        try {
                            const answer = await getRequirements();
                            resolve(answer);
                        } catch (error) {
                            reject(error);
                        }
                    }, 30000);
                }
            });
        });
    }

    if (window.location.pathname.indexOf("/missions/") === 0) {
        const initButtons = () => {
            let btnMarkup = '<div class="btn-group" style="margin-left: 5px; margin-right: 5px;">';

            btnMarkup += `
                <a href="#" class="btn btn-success btn-sm alert_notify_alliance" title="Alarmeren, vrijgeven en chatbericht">
                    <img class="icon icons8-Phone-Filled" src="/images/icons8-phone_filled.svg" width="18" height="18">
                    <img class="icon icons8-Share" src="/images/icons8-share.svg" width="20" height="20">
                    <span class="glyphicon glyphicon-bullhorn" style="font-size: 13px;"></span>
                </a></div>`;

            let optionsBtnMarkup = `
                <a href="#" id="openAllianceShareOptions" class="btn btn-sm btn-default" title="Berichten" style="margin: 0">
                    <span class="glyphicon glyphicon-option-horizontal"></span>
                </a>
                <div class="btn btn-sm btn-default" style="margin:0; padding: 1px; display: none;" id="allianceShareOptions">
                    <input type="text" id="allianceShareText" value="${messages[0]}">
                    <label style="margin-left: 2px; margin-right: 2px;">
                        <input type="checkbox" id="postToChat" name="postToChat" value="true" ${alliance_chat_setting ? 'checked="true"' : ''}>
                        Naar Team Chat
                    </label>
                    <div style="text-align: left;">
                        <ul>`;
            $.each(messages, (index, msg) => {
                optionsBtnMarkup += `<li class="custom_AllianceShareText">${msg}</li>`;
            });
            optionsBtnMarkup += `</ul></div></div>`;

            $('.alert_next_alliance').parent().append(btnMarkup);
            $('.alert_notify_alliance').first().parent().prepend(optionsBtnMarkup);

            $('#openAllianceShareOptions').click(() => {
                $('#allianceShareOptions').show();
                $('#openAllianceShareOptions').hide();
            });

            $('.custom_AllianceShareText').click(function () {
                $('#allianceShareText').val($(this).text());
            });

            $('.alert_notify_alliance').append('<span style="margin-left: 5px;" class="glyphicon glyphicon-arrow-right"></span>');

            $('.alert_notify_alliance').click(AlliancePressed);
        };

        const shortcutKeys = 126;
        let test = true;

        $(document).keydown(e => {
            if (!($("input").is(":focus"))) {
                if (localStorage.getItem('SAP_Alarmcentrale_Shortcut') === 'on') {
                    if (e.keyCode === shortcutKeys) {
                        AlliancePressed();
                    }
                    return e.returnValue;
                }
            }
        });

        const AlliancePressed = () => {
            if (test && possible_to_share) {
                test = false;
                const missionShareLink = $('#mission_alliance_share_btn').attr('href');
                if (missionShareLink) {
                    processAllianceShare();
                }
            } else {
                alert("Deze inzet is onder de deelgrens. Gebruik de normale deelknop om alsnog te delen!");
            }
        };

        const processAllianceShare = () => {
            $('#allianceShareOptions').hide();
            $('#openAllianceShareOptions').show();

            const sendToAlliance = $('#postToChat').is(':checked') ? 1 : 0;
            const missionShareLink = $('#mission_alliance_share_btn').attr('href');
            const missionId = missionShareLink.replace('/missions/', '').replace('/alliance', '');
            const csrfToken = $('meta[name="csrf-token"]').attr('content');
            const message = $('#allianceShareText').val();

            $('.alert_notify_alliance').html('Delen...');
            $.ajax({
                url: missionShareLink,
                headers: { 'Alarmcentrale': "1" },
                success() {
                    $('.alert_notify_alliance').html('Chat...');
                    $.ajax({
                        type: 'POST',
                        url: `/mission_replies`,
                        headers: { 'Alarmcentrale': "1" },
                        data: {
                            authenticity_token: csrfToken,
                            mission_reply: {
                                alliance_chat: sendToAlliance,
                                content: message,
                                mission_id: missionId,
                            },
                        },
                        success() {
                            $('.alert_notify_alliance').html('Alarmeren...');
                            $('.alert_next').first().click();
                        },
                    });
                },
            });
        };

        const transformMessages = async (callback) => {
            try {
                const missionHelp = $('#mission_help');
                const missionlink = missionHelp.attr('href');
                if (missionHelp && missionlink) {
                    let missionID = $('#mission_help').attr('href').split("/").pop().replace(/\?.*/, '');
                    const overlay = new URLSearchParams($('#mission_help').attr('href').split("/").pop()).get('overlay_index');
                    if (overlay !== null) {
                        missionID = `${missionID}-${overlay}`;
                    }

                    if (!localStorage.SAP_Alarmcentrale || JSON.parse(localStorage.SAP_Alarmcentrale).lastUpdate < (new Date().getTime() - 5 * 1000 * 60)) {
                        await getRequirements();
                    }

                    let credits = 0;
                    const mission = JSON.parse(localStorage.MKS_requirements)[missionID];
                    if (mission?.additional?.guard_mission) {
                        credits = parseInt($('#col_left').text().split('Verdiensten: ')[1].split(` ${I18n.translations.nl_NL.javascript.credits}`)[0].split('.').join('')) ?? 0;
                        messages = messagesplanned.map(msg => msg.replace(/%CREDITS%/g, credits.toLocaleString() || ''));
                        alliance_chat_setting = planned_chat_setting ? true : false;
                        planned_alliance_chat_credits_setting ? alliance_chat_setting = parseInt(credits) >= planned_alliance_chat_credits : '';
                        possible_to_share = true;
                    } else {
                        messages = messages.map(msg => {
                            credits = mission?.average_credits ?? 0;
                            return msg.replace(/%CREDITS%/g, credits.toLocaleString() || '');
                        });
                        alliance_chat_credits_setting ? alliance_chat_setting = parseInt(credits) >= alliance_chat_credits : '';
                        if (credits >= alliance_credits || ignore_min_credits_to_share) {
                            possible_to_share = true;
                        }
                    }
                    callback();
                }
            } catch (error) {
                console.error('Error transforming messages', error.message);
            }
        };

        const messagesplanned = ["Geplande inzet: %CREDITS% Credits"];
        const messages = [`~%CREDITS% Credits | Afvullen vanaf ${getFillTime()} | Sluitvoertuig: ${getSluitvoertuig()}`];

        transformMessages(() => {
            initButtons();
        });
    }
}
